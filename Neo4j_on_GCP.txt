
Neo4j on GCP cluster
https://medium.com/neo4j/running-neo4j-on-google-cloud-6592c1b4e4e5

Neo4j Enterprise on GCP Marketplace
https://neo4j.com/developer/neo4j-google-cloud-launcher/

Causal Clusters
https://neo4j.com/docs/operations-manual/current/clustering/introduction/
* Gives safety + scale + causal consistency = can read & write even with hardware or network failures
* Core servers safeguard data by replicating all transactions using the Raft protocol. Once majority of Core Servers in a cluster have accepted the transaction, then it's safe to acknowledge the commit to the end user app
* Read Replicas scale out graph workloads by acting like caches for the data that Core Servers safeguard. They're fully-fledged Neo4j dbs capable of fulfilling arbitrary (read-only) graph queries & procedures
* Causal consistency means that data that is written via the Core Servers can be read by all the cores - i.e. if one instance is updated with a write, then all the other cores should be able to read that change



# Create firewall
# Port 7473 is for HTTPS access to Neo4j Browser (the web-based shell we use to interact with the database)
# Port 7687 is for the binary Bolt protocol, to send queries to the database
# source-ranges allows all traffic from the entire internet
# target-tags indicates that this rule applies to any VM in your google project that is tagged “neo4j”
gcloud compute firewall-rules create allow-neo4j-bolt-https \
   --allow tcp:7473,tcp:7687 \
   --source-ranges 0.0.0.0/0 \
   --target-tags neo4j
   
# Create neo4j instance from the open source image
# If you want Neo4j Enterprise instead of Community, use this image instead: neo4j-enterprise-1–3–3-5
gcloud compute instances create my-neo4j \
   --scopes https://www.googleapis.com/auth/cloud-platform \
   --image-project launcher-public --tags neo4j \
   --image=neo4j-community-1-3-3-5
   
   
# Go to below address to log into neo4j using username 'neo4j' and password 'neo4j'
https://YOUR_VM_IP:7473

# Alternatively, use cypher-shell to work with the db directly using its public IP and 7867 Bolt port

# Create a new graph db by selecting 'Connect to Remote Graph'
# Name your db
# For host, input your VM IP
# Bolt port 7687


# Delete the GCP instance when you're done
gcloud compute instances delete $NEO4J_DB_NAME



----------------------------------------------------------------------------

Neo4j VM with Bitnami's Distribution

https://bitnami.com/stack/neo4j

# Manual Set Up

1) On GCP Marketplace, search for "Neo4j Certified by Bitnami"
   * Cost should be $24.75 per month estimated

2) Fill in the form details with the below

Deployment name
neo4j-1-vm

Zone
europe-west1-d

Machine type
n1-standard-1 (1 vCPU, 3.75 GB memory)

Network
project-id-base-vpc

Subnetwork
project-id-base

External IP
None


# Automated Setup using Gcloud Shell

PROJECT_ID = $"venti-sandbox-956450"
VM_NAME = $"neo4j-1-vm"
SERVICE_ACC = $"255431157345-compute@developer.gserviceaccount.com"

gcloud beta compute --project=$PROJECT_ID \
instances create $VM_NAME \
	--zone=europe-west1-d \
	--machine-type=n1-standard-1 \
	--subnet=sandbox-base-vpc \
	--no-address \
	--metadata=bitnami-base-password=qSji8T82Xm3G,google-monitoring-enable=0,google-logging-enable=0 \
	--maintenance-policy=MIGRATE \
	--service-account=$SERVICE_ACC \
	--scopes=https://www.googleapis.com/auth/bigquery,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/devstorage.read_write,https://www.googleapis.com/auth/cloud.useraccounts.readonly,https://www.googleapis.com/auth/cloudruntimeconfig \
	--tags=neo4j-1-vm-deployment,https-server \
	--image=bitnami-neo4j-3-5-13-0-linux-debian-9-x86-64-nami \
	--image-project=bitnami-launchpad \
	--boot-disk-size=10GB \
	--boot-disk-type=pd-standard \
	--boot-disk-device-name=neo4j-1-vm-vm-1 \
	--labels=goog-dm=neo4j-1-vm \
	--reservation-affinity=any

gcloud compute --project=$PROJECT_ID \
firewall-rules create sandbox-base-vpc-allow-https \
	--direction=INGRESS \
	--priority=1000 \
	--network=sandbox-base-vpc \
	--action=ALLOW \
	--rules=tcp:443 \
	--source-ranges=0.0.0.0/0 \
	--target-tags=https-server
   

VM location of files for building graph db
cd /home/bitnami/stack/neo4j/import

VM location of cypher-shell
cd /home/bitnami/stack/neo4j/bin


